(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     16119,        361]
NotebookOptionsPosition[     14913,        333]
NotebookOutlinePosition[     15316,        349]
CellTagsIndexPosition[     15273,        346]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Middle", " ", "pattern", " ", 
     RowBox[{"analysis", ":", " ", 
      RowBox[{"For", " ", "even", " ", "values", " ", "of", " ", "c"}]}]}], 
    ",", " ", 
    RowBox[{"we", " ", "want", " ", "to", " ", "check", " ", "if", " ", "N", 
     RowBox[{"(", 
      RowBox[{"a", ",", 
       RowBox[{"c", ";", "n"}]}], ")"}], " ", "converges", " ", "to", " ", 
     "a", " ", "predictable", " ", "sequence", " ", "of", " ", "values", " ", 
     "over", " ", "n", " ", "as", " ", "we", " ", "make", " ", "c", " ", 
     RowBox[{"larger", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"===", "===", "===", "===", "===", " ", 
     RowBox[{"MACROS", ":", " ", 
      RowBox[{"===", "==="}]}]}], "=", 
    RowBox[{"==", 
     RowBox[{
     "===", "===", "===", "===", "===", "===", "===", "===", "===", 
      "\[Equal]"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"start", " ", "and", " ", "stop", " ", "must", " ", "be", " ", 
    RowBox[{"even", "!"}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.8240305930541306`*^9, 3.824030646149061*^9}, {
  3.8240306908280373`*^9, 3.824030704076652*^9}, {3.824030937245822*^9, 
  3.8240309553408813`*^9}, {3.8240310063972187`*^9, 3.8240310173967204`*^9}, {
  3.8240311989407387`*^9, 3.8240312121807175`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"7d409630-b1f2-4ef2-bf69-a2df7b3191d0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"startingPoint", " ", "=", " ", "20"}], "\[IndentingNewLine]", 
 RowBox[{"stoppingPoint", " ", "=", " ", "50"}], "\[IndentingNewLine]", 
 RowBox[{"en", " ", "=", " ", "50"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "===", "===", "===", "===", "===", "===", "===", "===", "===", "===", "===",
     "===", "===", "===", "===", "===", "===", "===", "===", "==="}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.8240309619738197`*^9, 3.8240310201090555`*^9}, {
  3.8240312952132487`*^9, 3.824031319884973*^9}, {3.8240318676381636`*^9, 
  3.824031867781308*^9}, {3.82403190861423*^9, 3.8240319153651686`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"4f5ea473-1a97-4850-b185-edd76dd5bfde"],

Cell[BoxData["20"], "Output",
 CellChangeTimes->{3.8240313255750265`*^9, 3.824031872296732*^9, 
  3.824031921292878*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"39f91dfb-5d48-473b-9d33-fab1259a911d"],

Cell[BoxData["50"], "Output",
 CellChangeTimes->{3.8240313255750265`*^9, 3.824031872296732*^9, 
  3.82403192129498*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"d32855d6-24ae-4ea3-a9de-72e654f8565f"],

Cell[BoxData["50"], "Output",
 CellChangeTimes->{3.8240313255750265`*^9, 3.824031872296732*^9, 
  3.8240319212968984`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2144ec8b-f5bd-48e7-b2a2-8de93bf6a530"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"Name", ":", " ", 
     RowBox[{
     "partitionN", "\[IndentingNewLine]", " ", "Mathematical", " ", 
      "Notation"}], ":", " ", 
     RowBox[{"N", 
      RowBox[{"(", 
       RowBox[{"r", ",", "m", ",", "n"}], ")"}], "\[IndentingNewLine]", " ", 
      RowBox[{"Desc", "."}]}], ":", " ", 
     RowBox[{
     "Gives", " ", "the", " ", "number", " ", "of", " ", "partitions", " ", 
      "of", " ", "a", " ", "positive", " ", "integer"}]}], ",", " ", "n", ",",
     " ", 
    RowBox[{
    "whose", " ", "RANK", " ", "is", " ", "congruent", " ", "to", " ", "r"}], 
    ",", " ", 
    RowBox[{"modulo", " ", 
     RowBox[{"m", "."}]}]}], " ", "\[IndentingNewLine]", "*)"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"partitionN", "[", 
     RowBox[{"r_", ",", "m_", ",", "n_"}], "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"r0", "=", "r"}], ",", 
        RowBox[{"m0", "=", "m"}], ",", 
        RowBox[{"n0", "=", "n"}], ",", 
        RowBox[{"counter", "=", "0"}], ",", "i", ",", "rank", ",", "list"}], 
       "}"}], ",", "\[IndentingNewLine]", "\t", 
      RowBox[{
       RowBox[{"list", " ", "=", " ", 
        RowBox[{"IntegerPartitions", "[", "n0", "]"}]}], ";", 
       "\[IndentingNewLine]", "\t", 
       RowBox[{"Do", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"rank", "=", 
           RowBox[{
            RowBox[{"Max", "[", 
             RowBox[{"list", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "-", 
            RowBox[{"Length", "[", 
             RowBox[{"list", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}]}]}], ";", " ", 
          "\[IndentingNewLine]", "\t", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Mod", "[", 
              RowBox[{"rank", ",", "m0"}], "]"}], "\[Equal]", "r0"}], ",", 
            RowBox[{"counter", "++"}]}], "]"}], ";"}], " ", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "[", "list", "]"}]}], "}"}]}], "]"}], ";", 
       "\[IndentingNewLine]", "counter"}]}], "]"}]}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Build", " ", 
      RowBox[{"dataList", ".", " ", "Now"}]}], ",", " ", 
     RowBox[{"we", " ", "want", " ", "c", " ", "to", " ", "vary"}], ",", " ", 
     RowBox[{
     "and", " ", "only", " ", "want", " ", "to", " ", "compute", " ", "the", 
      " ", "\"\<middle\>\"", " ", "values", " ", "of", " ", "N", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"a", ",", 
         RowBox[{"c", ";", "n"}]}], ")"}], "--"}], " ", "that", " ", "is"}], 
     ",", " ", 
     RowBox[{
      RowBox[{"those", " ", "for", " ", "a"}], " ", "=", " ", 
      RowBox[{"c", "/", "2."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"dataList", " ", "=", " ", 
    RowBox[{"{", "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", "\[LessEqual]", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"stoppingPoint", "-", "startingPoint"}], ")"}], "/", "2"}]}], 
     ",", " ", 
     RowBox[{"i", "++"}], ",", " ", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"dataList", ",", 
       RowBox[{"{", "}"}]}], "]"}]}], "]"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Fill", " ", "with", " ", "data"}], " ", "*)"}], "\n", 
   RowBox[{"For", "[", 
    RowBox[{
     RowBox[{"i", "=", "1"}], ",", 
     RowBox[{"i", " ", "\[LessEqual]", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"stoppingPoint", "-", "startingPoint"}], ")"}], "/", "2"}]}], 
     ",", 
     RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
     RowBox[{"For", "[", 
      RowBox[{
       RowBox[{"n", "=", "1"}], ",", 
       RowBox[{"n", "\[LessEqual]", "en"}], ",", 
       RowBox[{"n", "++"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"startingPoint", "+", 
          RowBox[{"2", "*", 
           RowBox[{"(", 
            RowBox[{"i", "-", "1"}], ")"}]}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{
          RowBox[{"dataList", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"partitionN", "[", 
           RowBox[{
            RowBox[{"m", "/", "2"}], ",", "m", ",", "n"}], "]"}]}], "]"}]}]}],
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8240307081817055`*^9, 3.824030718333068*^9}, {
  3.824030765159786*^9, 3.824030828157277*^9}, {3.824030858404552*^9, 
  3.824030924388714*^9}, {3.824031027524749*^9, 3.824031046733243*^9}, {
  3.8240311420528975`*^9, 3.824031185717168*^9}, {3.8240313656468983`*^9, 
  3.8240313679199476`*^9}, {3.824031617845765*^9, 3.8240316856392064`*^9}, {
  3.8240317185494037`*^9, 3.8240317190371666`*^9}, {3.824031749790056*^9, 
  3.8240318342217703`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c7c79654-7453-4d93-9e2d-908a178bb55f"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.824031325604751*^9, 3.8240318723335915`*^9, 
  3.824031921327818*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"9fb15437-f3ec-433c-98d3-57689d97e08e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Print", " ", "the", " ", "data", " ", "as", " ", "a", " ", "matrix"}], 
    "..."}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"MatrixForm", "[", "dataList", "]"}]}]], "Input",
 CellChangeTimes->{{3.824031266227002*^9, 3.824031267276932*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"95ea84a5-3deb-48fc-84be-dce8aabb3b22"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", "2", 
      "4", "4", "8", "8", "14", "16", "24", "28", "42", "48", "66", "80", 
      "108", "128", "170", "202", "264", "314", "400", "478", "604", "718", 
      "894", "1066", "1314", "1560", "1910", "2264", "2750", "3254", "3922", 
      "4632", "5558", "6542", "7806", "9174"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", 
      "2", "4", "4", "8", "8", "14", "16", "24", "28", "42", "48", "68", "80",
       "108", "130", "172", "204", "266", "318", "406", "484", "612", "728", 
      "908", "1082", "1334", "1586", "1942", "2300", "2796", "3310", "3992", 
      "4714", "5656", "6660", "7950"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", 
      "2", "2", "4", "4", "8", "8", "14", "16", "24", "28", "42", "48", "68", 
      "82", "108", "130", "174", "206", "268", "322", "408", "490", "620", 
      "736", "918", "1098", "1350", "1608", "1970", "2334", "2836", "3362", 
      "4050", "4790", "5748", "6768"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", 
      "0", "2", "2", "4", "4", "8", "8", "14", "16", "24", "28", "42", "48", 
      "68", "82", "110", "130", "174", "208", "270", "324", "412", "494", 
      "624", "744", "928", "1108", "1366", "1626", "1992", "2364", "2872", 
      "3404", "4106", "4854", "5826"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "2", "0", "2", "2", "4", "4", "8", "8", "14", "16", "24", "28", "42", 
      "48", "68", "82", "110", "132", "174", "208", "272", "326", "414", 
      "498", "628", "750", "934", "1118", "1378", "1642", "2010", "2388", 
      "2902", "3442", "4150", "4912"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "2", "0", "2", "2", "4", "4", "8", "8", "14", "16", "24", "28", 
      "42", "48", "68", "82", "110", "132", "176", "208", "272", "328", "416",
       "500", "632", "754", "940", "1126", "1386", "1654", "2028", "2406", 
      "2926", "3474", "4188"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "2", "0", "2", "2", "4", "4", "8", "8", "14", "16", "24", 
      "28", "42", "48", "68", "82", "110", "132", "176", "210", "272", "328", 
      "418", "502", "634", "758", "944", "1132", "1394", "1664", "2038", 
      "2424", "2946", "3498"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "2", "0", "2", "2", "4", "4", "8", "8", "14", "16", "24",
       "28", "42", "48", "68", "82", "110", "132", "176", "210", "274", "328",
       "418", "504", "636", "760", "948", "1136", "1400", "1672", "2048", 
      "2436", "2962"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "2", "0", "2", "2", "4", "4", "8", "8", "14", "16", 
      "24", "28", "42", "48", "68", "82", "110", "132", "176", "210", "274", 
      "330", "418", "504", "638", "762", "950", "1140", "1404", "1678", 
      "2056", "2446"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "0", "2", "0", "2", "2", "4", "4", "8", "8", "14", 
      "16", "24", "28", "42", "48", "68", "82", "110", "132", "176", "210", 
      "274", "330", "420", "504", "638", "764", "952", "1142", "1408", "1682",
       "2062"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "0", "0", "2", "0", "2", "2", "4", "4", "8", "8", 
      "14", "16", "24", "28", "42", "48", "68", "82", "110", "132", "176", 
      "210", "274", "330", "420", "506", "638", "764", "954", "1144", "1410", 
      "1686"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", "2", "4", "4", "8", 
      "8", "14", "16", "24", "28", "42", "48", "68", "82", "110", "132", 
      "176", "210", "274", "330", "420", "506", "640", "764", "954", "1146", 
      "1412"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", "2", "4", "4", 
      "8", "8", "14", "16", "24", "28", "42", "48", "68", "82", "110", "132", 
      "176", "210", "274", "330", "420", "506", "640", "766", "954", "1146"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", "2", "4", 
      "4", "8", "8", "14", "16", "24", "28", "42", "48", "68", "82", "110", 
      "132", "176", "210", "274", "330", "420", "506", "640", "766", "956"},
     {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", "2", 
      "4", "4", "8", "8", "14", "16", "24", "28", "42", "48", "68", "82", 
      "110", "132", "176", "210", "274", "330", "420", "506", "640", "766"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.8240318750629864`*^9, 3.8240319710897665`*^9},
 CellLabel->
  "Out[26]//MatrixForm=",ExpressionUUID->"f7d5a9ff-97d0-45ed-9aa1-\
f8d87072d23b"]
}, Open  ]]
},
WindowSize->{1920, 997},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"30793ea0-c359-45a4-86cd-df7c5260e82d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1468, 31, 67, "Input",ExpressionUUID->"7d409630-b1f2-4ef2-bf69-a2df7b3191d0"],
Cell[CellGroupData[{
Cell[2051, 55, 734, 13, 86, "Input",ExpressionUUID->"4f5ea473-1a97-4850-b185-edd76dd5bfde"],
Cell[2788, 70, 199, 3, 32, "Output",ExpressionUUID->"39f91dfb-5d48-473b-9d33-fab1259a911d"],
Cell[2990, 75, 198, 3, 32, "Output",ExpressionUUID->"d32855d6-24ae-4ea3-a9de-72e654f8565f"],
Cell[3191, 80, 201, 3, 32, "Output",ExpressionUUID->"2144ec8b-f5bd-48e7-b2a2-8de93bf6a530"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3429, 88, 5198, 131, 447, "Input",ExpressionUUID->"c7c79654-7453-4d93-9e2d-908a178bb55f"],
Cell[8630, 221, 215, 4, 32, "Output",ExpressionUUID->"9fb15437-f3ec-433c-98d3-57689d97e08e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8882, 230, 425, 9, 67, "Input",ExpressionUUID->"95ea84a5-3deb-48fc-84be-dce8aabb3b22"],
Cell[9310, 241, 5587, 89, 283, "Output",ExpressionUUID->"f7d5a9ff-97d0-45ed-9aa1-f8d87072d23b"]
}, Open  ]]
}
]
*)

